// Generated by CoffeeScript 1.12.3
var Schema, crypto, isEmail;

crypto = require('crypto');

isEmail = function(email) {
  return /^[a-z0-9,!#\$%&'\*\+\/\=\?\^_`\{\|}~\-]+(\.[a-z0-9,!#\$%&'\*\+\/\=\?\^_`\{\|}~\-]+)*@[a-z0-9\-]+(\.[a-z0-9\-]+)*\.([a-z]{2,})$/.test(email);
};

module.exports = Schema = (function() {
  function Schema(ron, options) {
    var name, ref, value;
    this.ron = ron;
    if (typeof options === 'string') {
      options = {
        name: options
      };
    }
    this.data = {
      db: ron.name,
      name: options.name,
      temporal: {},
      properties: {},
      identifier: null,
      index: {},
      unique: {}
    };
    if (options.temporal) {
      this.temporal(options.temporal);
    }
    if (options.properties) {
      ref = options.properties;
      for (name in ref) {
        value = ref[name];
        this.property(name, value);
      }
    }
  }

  Schema.prototype.hash = function(key) {
    if (typeof key === 'number') {
      key = "" + key;
    }
    if (key != null) {
      return crypto.createHash('sha1').update(key).digest('hex');
    } else {
      return 'null';
    }
  };

  Schema.prototype.identifier = function(property) {
    if (property != null) {
      if (this.data.properties[property] == null) {
        this.data.properties[property] = {};
      }
      this.data.properties[property].type = 'int';
      this.data.properties[property].identifier = true;
      this.data.identifier = property;
      return this;
    } else {
      return this.data.identifier;
    }
  };

  Schema.prototype.index = function(property) {
    if (property != null) {
      if (this.data.properties[property] == null) {
        this.data.properties[property] = {};
      }
      this.data.properties[property].index = true;
      this.data.index[property] = true;
      return this;
    } else {
      return Object.keys(this.data.index);
    }
  };

  Schema.prototype.property = function(property, schema) {
    if (schema != null) {
      if (schema == null) {
        schema = {};
      }
      schema.name = property;
      this.data.properties[property] = schema;
      if (schema.identifier) {
        this.identifier(property);
      }
      if (schema.index) {
        this.index(property);
      }
      if (schema.unique) {
        this.unique(property);
      }
      return this;
    } else {
      return this.data.properties[property];
    }
  };

  Schema.prototype.name = function() {
    return this.data.name;
  };

  Schema.prototype.serialize = function(records) {
    var i, isArray, j, len, properties, property, record, ref, value;
    properties = this.data.properties;
    isArray = Array.isArray(records);
    if (!isArray) {
      records = [records];
    }
    for (i = j = 0, len = records.length; j < len; i = ++j) {
      record = records[i];
      if (record == null) {
        continue;
      }
      if (typeof record === 'object') {
        for (property in record) {
          value = record[property];
          if (((ref = properties[property]) != null ? ref.type : void 0) === 'date' && (value != null)) {
            if (typeof value === 'number') {

            } else if (typeof value === 'string') {
              if (/^\d+$/.test(value)) {
                record[property] = parseInt(value, 10);
              } else {
                record[property] = Date.parse(value);
              }
            } else if (typeof value === 'object' && value instanceof Date) {
              record[property] = value.getTime();
            }
          }
        }
      }
    }
    if (isArray) {
      return records;
    } else {
      return records[0];
    }
  };

  Schema.prototype.temporal = function(temporal) {
    if (temporal != null) {
      if (temporal === true) {
        temporal = {
          creation: 'cdate',
          modification: 'mdate'
        };
      }
      this.data.temporal = temporal;
      this.property(temporal.creation, {
        type: 'date'
      });
      return this.property(temporal.modification, {
        type: 'date'
      });
    } else {
      return [this.data.temporal.creation, this.data.temporal.modification];
    }
  };

  Schema.prototype.unique = function(property) {
    if (property != null) {
      if (this.data.properties[property] == null) {
        this.data.properties[property] = {};
      }
      this.data.properties[property].unique = true;
      this.data.unique[property] = true;
      return this;
    } else {
      return Object.keys(this.data.unique);
    }
  };

  Schema.prototype.unserialize = function(records, options) {
    var i, identifier, isArray, j, len, properties, property, record, ref, ref1, ref2, value;
    if (options == null) {
      options = {};
    }
    ref = this.data, identifier = ref.identifier, properties = ref.properties;
    isArray = Array.isArray(records);
    if (!isArray) {
      records = [records];
    }
    if (options.identifiers) {
      options.properties = [identifier];
    }
    for (i = j = 0, len = records.length; j < len; i = ++j) {
      record = records[i];
      if (record == null) {
        continue;
      }
      if (typeof record === 'object') {
        for (property in record) {
          value = record[property];
          if (options.properties && options.properties.indexOf(property) === -1) {
            delete record[property];
            continue;
          }
          if (((ref1 = properties[property]) != null ? ref1.type : void 0) === 'int' && (value != null)) {
            record[property] = parseInt(value, 10);
          } else if (((ref2 = properties[property]) != null ? ref2.type : void 0) === 'date' && (value != null)) {
            if (/^\d+$/.test(value)) {
              value = parseInt(value, 10);
            } else {
              value = Date.parse(value);
            }
            if (options.milliseconds) {
              record[property] = value;
            } else if (options.seconds) {
              record[property] = Math.round(value / 1000);
            } else {
              record[property] = new Date(value);
            }
          }
        }
        if (options.identifiers) {
          records[i] = record[identifier];
        }
      } else if (typeof record === 'number' || typeof record === 'string') {
        records[i] = parseInt(record);
      }
    }
    if (isArray) {
      return records;
    } else {
      return records[0];
    }
  };

  Schema.prototype.validate = function(records, options) {
    var db, isArray, name, properties, property, record, ref, validation, validations, x;
    if (options == null) {
      options = {};
    }
    ref = this.data, db = ref.db, name = ref.name, properties = ref.properties;
    isArray = Array.isArray(records);
    if (!isArray) {
      records = [records];
    }
    validations = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = records.length; j < len; j++) {
        record = records[j];
        validation = {};
        for (x in properties) {
          property = properties[x];
          if (!options.skip_required && property.required && (record[property.name] == null)) {
            if (options["throw"]) {
              throw new Error("Required property " + property.name);
            } else {
              validation[property.name] = 'required';
            }
          } else if (property.type === 'email' && !isEmail(record[property.name])) {
            if (options["throw"]) {
              throw new Error("Invalid email " + record[property.name]);
            } else {
              validation[property.name] = 'invalid_email';
            }
          }
        }
        results.push(validation);
      }
      return results;
    })();
    if (isArray) {
      return validations;
    } else {
      return validations[0];
    }
  };

  return Schema;

})();
