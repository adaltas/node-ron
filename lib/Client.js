// Generated by CoffeeScript 1.12.3
var Client, Records, Schema, redis;

redis = require('redis');

Schema = require('./Schema');

Records = require('./Records');

module.exports = Client = (function() {
  function Client(options) {
    var ref, ref1;
    if (options == null) {
      options = {};
    }
    this.options = options;
    this.name = options.name || 'ron';
    this.schemas = {};
    this.records = {};
    if (this.options.redis) {
      this.redis = this.options.redis;
    } else {
      this.redis = redis.createClient((ref = options.port) != null ? ref : 6379, (ref1 = options.host) != null ? ref1 : '127.0.0.1');
      if (options.password != null) {
        this.redis.auth(options.password);
      }
      if (options.database != null) {
        this.redis.select(options.database);
      }
    }
  }

  Client.prototype.get = function(schema) {
    var create, i, j, k, ref, ref1, v;
    create = true;
    if (arguments.length > 1) {
      if (typeof arguments[0] === 'string') {
        schema = {
          name: arguments[0]
        };
      } else {
        schema = arguments[0];
      }
      for (i = j = 1, ref = arguments.length; 1 <= ref ? j < ref : j > ref; i = 1 <= ref ? ++j : --j) {
        ref1 = arguments[i];
        for (k in ref1) {
          v = ref1[k];
          schema[k] = v;
        }
      }
    } else if (typeof schema === 'string') {
      schema = {
        name: schema
      };
      if (this.records[schema.name] != null) {
        create = false;
      }
    }
    if (create) {
      this.records[schema.name] = new Records(this, schema);
    }
    return this.records[schema.name];
  };

  Client.prototype.quit = function(callback) {
    return this.redis.quit(function(err, status) {
      if (!callback) {
        return;
      }
      if (err) {
        return callback(err);
      }
      if (callback) {
        return callback(null, status);
      }
    });
  };

  return Client;

})();
