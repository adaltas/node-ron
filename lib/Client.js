// Generated by CoffeeScript 1.4.0
var Client, Records, Schema, redis;

redis = require('redis');

Schema = require('./Schema');

Records = require('./Records');

/*

Client connection
=================

The client wraps a redis connection and provides access to records definition 
and manipulation.

Internally, Ron use the [Redis client for Node.js](https://github.com/mranney/node_redis).
*/


module.exports = Client = (function() {
  /*
  
    `ron([options])` Client creation
    --------------------------------
    
    `options`           Options properties include:   
  
    *   `name`          A namespace for the application, all keys with be prefixed with "#{name}:". Default to "ron"   
    *   `redis`         Provide an existing instance in case you don't want a new one to be created.   
    *   `host`          Redis hostname.   
    *   `port`          Redis port.   
    *   `password`      Redis password.   
    *   `database`      Redis database (an integer).   
  
    Basic example:
  
        ron = require 'ron'
        client = ron
          host: '127.0.0.1'
          port: 6379
  */

  function Client(options) {
    var _ref, _ref1;
    if (options == null) {
      options = {};
    }
    this.options = options;
    this.name = options.name || 'ron';
    this.schemas = {};
    this.records = {};
    if (this.options.redis) {
      this.redis = this.options.redis;
    } else {
      this.redis = redis.createClient((_ref = options.port) != null ? _ref : 6379, (_ref1 = options.host) != null ? _ref1 : '127.0.0.1');
      if (options.password != null) {
        this.redis.auth(options.password);
      }
      if (options.database != null) {
        this.redis.select(options.database);
      }
    }
  }

  /*
  
    `get(schema)` Records definition and access
    -------------------------------------------
    Return a records instance. If the `schema` argument is an object, a new 
    instance will be created overwriting any previously defined instance 
    with the same name.
  
    `schema`           An object defining a new schema or a string referencing a schema name.
    
    Define a record from a object:
  
        client.get
          name: 'users'
          properties:
            user_id: identifier: true
            username: unique: true
            email: index: true
    
    Define a record from function calls:
    
        Users = client.get 'users'
        Users.identifier 'user_id'
        Users.unique 'username'
        Users.index 'email'
  
    Alternatively, the function could be called with a string 
    followed by multiple schema definition that will be merged.
    Here is a valid example:
  
        client.get 'username', temporal: true, properties: username: unique: true
  */


  Client.prototype.get = function(schema) {
    var create, i, k, v, _i, _ref, _ref1;
    create = true;
    if (arguments.length > 1) {
      if (typeof arguments[0] === 'string') {
        schema = {
          name: arguments[0]
        };
      } else {
        schema = arguments[0];
      }
      for (i = _i = 1, _ref = arguments.length; 1 <= _ref ? _i < _ref : _i > _ref; i = 1 <= _ref ? ++_i : --_i) {
        _ref1 = arguments[i];
        for (k in _ref1) {
          v = _ref1[k];
          schema[k] = v;
        }
      }
    } else if (typeof schema === 'string') {
      schema = {
        name: schema
      };
      if (this.records[schema.name] != null) {
        create = false;
      }
    }
    if (create) {
      this.records[schema.name] = new Records(this, schema);
    }
    return this.records[schema.name];
  };

  /*
  
    `quit(callback)` Quit
    ---------------------
    Destroy the redis connection.
  
    `callback`        Received parameters are:   
  
    *   `err`         Error object if any.   
    *   `status`      Status provided by the redis driver
  */


  Client.prototype.quit = function(callback) {
    return this.redis.quit(function(err, status) {
      if (!callback) {
        return;
      }
      if (err) {
        return callback(err);
      }
      if (callback) {
        return callback(null, status);
      }
    });
  };

  return Client;

})();
