// Generated by CoffeeScript 1.4.0
var convert_anchor, convert_code, date, each, fs, mecano;

fs = require('fs');

mecano = require('mecano');

each = require('each');

date = function() {
  var d;
  return d = (new Date).toISOString();
};

convert_anchor = function(text) {
  var re_anchor;
  re_anchor = /`([\w]+)\(/g;
  return text.replace(re_anchor, function(str, code) {
    return "<a name=\"" + code + "\"></a>\n`" + code + "(";
  });
};

convert_code = function(text) {
  var re_code;
  re_code = /\n(\s{2}\s*?\w[\s\S]*?)\n(?!\s)/g;
  return text.replace(re_code, function(str, code) {
    code = code.split('\n').map(function(line) {
      return line.substr(4);
    }).join('\n');
    return "\n```coffeescript\n" + code + "\n```\n";
  });
};

each(['Client', 'Schema', 'Records']).parallel(true).on('item', function(next, file) {
  var destination, source;
  source = "" + __dirname + "/" + file + ".coffee";
  destination = "" + __dirname + "/../docs/" + (file.toLowerCase()) + ".md";
  return fs.readFile(source, 'ascii', function(err, content) {
    var docs, match, re, re_title;
    if (err) {
      return console.error(err);
    }
    re = /###\n([\s\S]*?)\n( *)###/g;
    re_title = /([\s\S]+)\n={2}=+([\s\S]*)/g;
    match = re.exec(content);
    match = re_title.exec(match[1]);
    docs = "---\nlanguage: en\nlayout: page\ntitle: \"" + match[1] + "\"\ndate: " + (date()) + "\ncomments: false\nsharing: false\nfooter: false\nnavigation: ron\ngithub: https://github.com/wdavidw/node-ron\n---\n" + (convert_code(match[2]));
    while (match = re.exec(content)) {
      match[1] = match[1].split('\n').map(function(line) {
        return line.substr(2);
      }).join('\n');
      docs += convert_code(convert_anchor(match[1]));
      docs += '\n';
    }
    return fs.writeFile(destination, docs, next);
  });
}).on('both', function(err) {
  var destination;
  if (err) {
    return console.error(err);
  }
  console.log('Documentation generated');
  destination = process.argv[2];
  if (!destination) {
    return;
  }
  return each(['index', 'client', 'schema', 'records']).on('item', function(next, file) {
    return mecano.copy({
      source: "" + __dirname + "/../docs/" + file + ".md",
      destination: destination,
      force: true
    }, next);
  }).on('both', function(err) {
    if (err) {
      return console.error(err);
    }
    return console.log('Documentation published');
  });
});
